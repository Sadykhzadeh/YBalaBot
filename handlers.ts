import { Context } from "https://deno.land/x/grammy@v1.10.1/context.ts";

import {
  BotError,
  GrammyError,
  HttpError,
} from "https://deno.land/x/grammy@v1.10.1/mod.ts";

const replyMarkup = {
  inline_keyboard: [[{
    text: "–ù–∞–∂–∏–º–∞–π —Å—é–¥–∞! üëÄ",
    switch_inline_query: "–ñ–∏–ª–∞ –±—ã–ª–∞ –¥–µ–≤–æ—á–∫–∞, –∏ –∑–≤–∞–ª–∏ –µ—ë –°–∞—à–∞. ",
  }]],
};
const supportMe = {
  inline_keyboard: [[{
    text: "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üëâüëà",
    url: "https://donationalerts.com/r/sadykhzadeh",
  }]],
};

const startHandler = async (ctx: Context) => {
  let name: string = ctx.message.from?.first_name;
  if (ctx.message.from?.last_name) name += " " + ctx.message.from?.last_name;
  await ctx.reply(
    `ü´∞üèª <b>–ü—Ä–∏–≤–µ—Ç, ${name}! \n</b>` +
      "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –∏ –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å.\n" +
      "\n" +
      "üìù –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /ahtung\n" +
      "\n" +
      "ü§åüèª <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –æ—á–µ–Ω—å –ª–µ–≥–∫–æ!</b> –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏ —á–∞—Ç –∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –º–∞–≥–∏—è! :)\n" +
      "\n",
    {
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    },
  );
};

const ahtungHandler = async (ctx: Context) => {
  await ctx.reply(
    `1) <b>–£ –±–æ—Ç–∞ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –º–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞–Ω–∏—è.</b> –û–Ω —É–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ä–∞–∂–∞—Ç—å ‚Äî –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
2) <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ —Ä–∞–∑—É–º–Ω—ã, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—è –∏—Ö. –ü–æ–¥—É–º–∞–π—Ç–µ, –Ω–µ –±—É–¥–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–±–∏–¥–Ω—ã–º –¥–ª—è –∫–æ–≥–æ-—Ç–æ –∏ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª–∏ –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑–∞–∫–æ–Ω–∞.
3) <b>–ë–æ—Ç –Ω–µ –ª—é–±–∏—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∏–ª–∏ —Ä–µ–ª–∏–≥–∏—é.</b> –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—ë—Ç –æ–¥–Ω—É –∏–∑ –æ—Å—Ç—Ä—ã—Ö —Ç–µ–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –æ—Ü–µ–Ω–∫–∞—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π. –ù–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!‚ù§Ô∏è`,
    {
      parse_mode: "HTML",
      reply_markup: supportMe,
    },
  );
};

const messageHandler = async (ctx: Context) => {
  if (ctx.update.message?.via_bot?.id) return;
  await ctx.reply(
    "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ inline. –ù–∞–∂–º–∏ /start, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª, –æ —á—ë–º —è.",
  );
};

const inlineQueryFunc = async (ctx: Context) => {
  const { inlineQuery } = ctx;

  if (!inlineQuery.query) {
    ctx.answerInlineQuery([]);
  }

  const intros = await fetch("https://zeapi.yandex.net/lab/api/yalm/intros"),
    introsJson = await intros.json();

  const result = introsJson.intros.map((i) => ({
    type: "article",
    id: i[0] + "4321" + +(new Date()),
    title: i[1],
    description: i[2].toString().replaceAll("–ë–∞–ª–∞–±–æ–±–∞", "–±–æ—Ç").replaceAll(
      "–ë–∞–ª–∞–±–æ–±—ã",
      "–±–æ—Ç–∞",
    ),
    input_message_content: {
      message_text:
        `<b>${inlineQuery.query}</b> <i>(–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...)</i>`,
      parse_mode: "HTML",
    },
    reply_markup: supportMe,
  }));
  await ctx.answerInlineQuery(result);
};

const chosenInlineResultFunc = async (ctx: Context) => {
  const intro = +ctx.chosenInlineResult.result_id.split("4321")[0];

  const postData = await fetch("https://zeapi.yandex.net/lab/api/yalm/text3", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        query: ctx.chosenInlineResult.query,
        intro: intro,
        filter: 1,
      }),
    }),
    postDataJson = await postData.json();

  if (postDataJson["bad_query"] > 0) {
    await ctx.editMessageText(
      `<b>–ë–æ—Ç –Ω–µ —É–º–µ–µ—Ç –≤ –ø–æ–ª–∏—Ç–∏–∫—É –∏/–∏–ª–∏ —Ä–µ–ª–∏–≥–∏—é.</b>
    
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—ë—Ç –æ–¥–Ω—É –∏–∑ –æ—Å—Ç—Ä—ã—Ö —Ç–µ–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –æ—Ü–µ–Ω–∫–∞—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π. –ù–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.`,
      {
        parse_mode: "HTML",
        reply_markup: supportMe,
      },
    );
  } else {
    await ctx.editMessageText(
      `<b>${ctx.chosenInlineResult.query}</b> ${postDataJson.text}`,
      {
        parse_mode: "HTML",
      },
    );
  }
};

const catchHandler = (q: BotError) => {
  const { ctx, error } = q;

  console.error(`Error while handling update ${ctx.update.update_id}:`);

  if (error instanceof GrammyError) {
    console.error("Error in request:", error.description);
  } else if (error instanceof HttpError) {
    console.error("Could not contact Telegram:", error);
  } else {
    console.error("Unknown error:", error);
  }
};

export {
  ahtungHandler,
  catchHandler,
  chosenInlineResultFunc,
  inlineQueryFunc,
  messageHandler,
  startHandler,
};
